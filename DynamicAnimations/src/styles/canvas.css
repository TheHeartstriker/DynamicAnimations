/* Changed in SlidePage acording to the lightning color/hue */
:root {
  --HUE: 0;
  /* Maroon */
  --Background: #3d0000;
  /* Blood red */
  --BloodRed: #8b0000;
  --Crimson: #dc143c;
  --Purple: #4b0082;
  --NeonPurple: #8000ff;
  --Amber: #ff8c00;
}

.CanvasContainer {
  position: absolute;
  width: 50%;
  height: 50%;
  top: 50%;
  left: 50%;
  border-radius: 25px;
  transform: translate(-50%, -50%);
  overflow: hidden;
  z-index: 1;
  transition: 1.5s ease-in-out height, 1.5s ease-in-out width,
    1.5s ease-in-out border, 2s ease-in-out border-radius,
    1.5s ease-in-out box-shadow;
  border: 2px solid var(--Crimson);
  box-shadow: 0 0 30px 4px rgba(220, 20, 60, 0.3);
}

.CanvasContainer.grow {
  width: 100%;
  height: 100%;
  border-radius: 0;
  border: none;
  box-shadow: none;
}

/*For animations that need only a single canvas*/
.myCanvas {
  position: absolute;
  background: rgb(0, 0, 0);
  width: 100%;
  height: 100%;
}

#wasmCanvas {
  position: absolute;
  background: rgb(0, 0, 0);
  width: 100%;
  height: 100%;
}

.canvasBtnContainer1 {
  position: absolute;
  bottom: 0px;
  left: 0px;
  width: 20vh;
  height: 20vh;
  display: grid;
  grid-template-columns: repeat(3, 1fr); /* 3 columns */
  grid-template-rows: repeat(2, 1fr); /* 2 rows */
  z-index: 10;
}
.CircleButton1:nth-child(1) {
  grid-column: 1;
  grid-row: 1;
}

.CircleButton1:nth-child(2) {
  grid-column: 1;
  grid-row: 2;
}

.CircleButton1:nth-child(3) {
  grid-column: 2;
  grid-row: 2;
}

.CircleButton1:nth-child(4) {
  grid-column: 3;
  grid-row: 2;
}

.CircleButton1 {
  position: relative;
  text-align: center;
  display: grid;
  place-items: center;
  font-size: 1.5rem;
  color: var(--Crimson);
  width: 100%;
  height: 100%;
  background-color: #0a0a0a;
  margin: auto;
  cursor: pointer;
  opacity: 0;
  pointer-events: none;
  transition: opacity 1.5s ease-in-out;
}

.CircleButton1.Animate {
  opacity: 1;
  pointer-events: auto;
}

.CircleButton1:not(.Animate) {
  opacity: 0;
  pointer-events: none;
}

/* Base styles for the button container */
.canvasBtnContainer {
  position: absolute;
  bottom: 0;
  right: var(--btn-container-right, 0); /* Default to 0 */
  left: var(--btn-container-left, auto); /* Default to auto */
  width: 25vh;
  height: 25vh;
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(3, 1fr);
  direction: rtl; /* Reverse horizontal flow */
  transform: rotate(180deg); /* Flip the grid visually */
  z-index: 10;
  gap: 0px;
}

/* Base styles for the buttons */
.CircleButton {
  transform: rotate(180deg); /* Un-flip button content */
  display: grid;
  place-items: center;
  width: 100%;
  height: 100%;
  background-color: var(--btn-bg-color, #0a0a0a); /* Default background color */
  color: var(--btn-color, var(--Amber)); /* Default text color */
  font-size: 1.5rem;
  opacity: 0;
  pointer-events: none;
  cursor: pointer;
  transition: opacity 1.5s ease-in-out;
  user-select: none;
  margin: 0;
  padding: 0;
}

/* Modifier class for left-aligned container */
.canvasBtnContainer.left {
  right: auto;
  left: 0;
}

/* Modifier class for right-aligned container */
.canvasBtnContainer.right {
  right: 0;
  left: auto;
}

/* Modifier class for custom button colors */
.CircleButton.red {
  color: var(--Crimson);
}

.CircleButton.purple {
  color: var(--NeonPurple);
}
.CircleButton.Animate {
  opacity: 1;
  pointer-events: auto;
}

.CircleButton:not(.Animate) {
  opacity: 0;
  pointer-events: none;
}

@keyframes FadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes FadeOut {
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
}

/*Canvas for rain animation*/
#rainCanvas {
  background: rgb(0, 0, 0);
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
}
/* Lightning canvas that layers over the rains */
#lightningCanvas {
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
}
/* The flash that appears in the backround */
@keyframes Flash {
  0% {
    background-color: hsla(var(--HUE), 50%, 30%, 0.5);
  }
  10% {
    background-color: hsla(var(--HUE), 50%, 60%, 0.6);
  }
  20% {
    background-color: hsla(var(--HUE), 50%, 45%, 0.5);
  }
  30% {
    background-color: hsla(var(--HUE), 50%, 60%, 0.6);
  }
  40% {
    background-color: hsla(var(--HUE), 50%, 45%, 0.5);
  }
  50% {
    background-color: hsla(var(--HUE), 50%, 30%, 0.5);
  }
  60% {
    background-color: hsla(var(--HUE), 50%, 60%, 0.6);
  }
  70% {
    background-color: hsla(var(--HUE), 50%, 45%, 0.5);
  }
  80% {
    background-color: hsla(var(--HUE), 50%, 30%, 0.5);
  }
  90% {
    background-color: hsla(var(--HUE), 50%, 60%, 0.6);
  }
  100% {
    background-color: hsla(var(--HUE), 50%, 30%, 0.5);
  }
}
